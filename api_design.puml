@startuml

class AccountController {
    + Register(username: string, email: string, password: string)
    + Login(username: string, password: string)
    + AddChild(childId: Guid)
    + Update(newPassword: string, newPhoneNumber: string)
    + GetLoggedUser(): User
    + GetUserById(userId: string): User
}

class AccountService {
    + Register(username: string, email: string, password: string): User
    + Login(username: string, password: string): User
    + AddChild(childId: Guid): User
    + Update(newPassword: string, newPhoneNumber: string): User
    + GetLoggedUser(): User
    + GetUserById(userId: string): User
}

interface IAccountService {
    + Register(username: string, email: string, password: string)
    + Login(username: string, password: string)
    + AddChild(childId: Guid)
    + Update(newPassword: string, newPhoneNumber: string)
    + GetLoggedUser()
    + GetUserById(userId: string)
}

class SchoolController {
    + GetAllSchools(): List<School>
    + Create(requestModel: SchoolCreateRequest): School
    + Update(requestModel: SchoolUpdateRequest): School
    + Delete(name: string): void
}

class SchoolService {
    + GetAllSchools(): List<School>
    + Create(newSchool: School): School
    + Update(updatedSchool: School): School
    + Delete(schoolName: string): void
}

interface ISchoolService {
    + GetAllSchools()
    + Create(newSchool: School)
    + Update(updatedSchool: School)
    + Delete(schoolName: string)
}

class CurricullumController {
    + Create(requestModel: CurricullumCreateRequest): Curricullum
    + Update(requestModel: CurricullumUpdateRequest): Curricullum
    + Delete(id: Guid): void
    + GetClassesForDay(Guid schoolClassId, DayOfWeek day)
    + GetLoggedUserClasses()
}

class CurricullumService {
    + Create(newCurriculum: Curricullum): Curricullum
    + Update(updatedCurriculum: Curricullum): Curricullum
    + Delete(curriculumId: Guid): void
    + GetClassesForDay(Guid schoolClassId, DayOfWeek day)
    + GetLoggedUserClasses(Guid userId)
    - GenerateCurriculum(List<Discipline> disciplines)
    - GenerateAvailableDayAndTime()
    - FindFreeTimeSlot()
    - GenerateAllTimeSlots()
    - IsValid(List<Discipline> disciplines)
    - GetTeacherClasses(Discipline discipline)
}

interface ICurricullumService {
    + Create(newCurriculum: Curricullum)
    + Update(updatedCurriculum: Curricullum)
    + Delete(curriculumId: Guid)
    + GetClassesForDay(Guid schoolClassId, DayOfWeek day)
    + GetLoggedUserClasses(Guid userId)
}

database GradeCenterContext {

}

class RequestValidator {
    + ValidateRequest(): void
    + ExtractSchool(requestModel: SchoolCreateRequest): School
    + GetLoggedUser(): User
    + IsAdmin(user: AspNetUser): bool
}

AccountController ...> IAccountService : uses
SchoolController ...> ISchoolService : uses
CurricullumController ...> ICurricullumService : uses
CurricullumController ...> ISchoolService : uses

AccountController .> RequestValidator : uses
SchoolController ..> RequestValidator : uses
CurricullumController ..> RequestValidator : uses

IAccountService <|.. AccountService : implements
ISchoolService <|.. SchoolService : implements
ICurricullumService <|.. CurricullumService : implements

AccountService --> GradeCenterContext
SchoolService --> GradeCenterContext
CurricullumService --> GradeCenterContext

@enduml